Ansible is simple open source IT engine which automates application deployment, intra service orchestration, cloud provisioning and
many other IT tools.
you can create VM --> environment provisioning
you can install things on top of it --> configuration
u can also deploy --> deployment

Ansible is not a part of CICD generally it is instead for environment provisioning and then creating ur pipeline.
But if deployment is involved u can use it in ur pipeline.

Ansible uses playbook to describe automation jobs, and playbook uses very simple language i.e. YAML .

Ansible is designed for multi-tier deployment. Ansible does not manage one system at time, it models IT infrastructure
by describing all of your systems are interrelated.

After connecting to your nodes, Ansible pushes small programs called as “Ansible MODULES”. 
Ansible runs that modules on your nodes and removes them when finished. 

Ansible manages your inventory in simple text files (These are the hosts file). Ansible uses the hosts file where one can group the hosts and can control 
the actions on a specific group in the playbooks.

If you want to install the new version of WebLogic/WebSphere server on all of the machines present in your enterprise, it is not feasible for you to manually go and update each and every machine.

You can install WebLogic/WebSphere in one go on all of your machines with Ansible playbooks and inventory written in the most simple way.
All you have to do is list out the IP addresses of your nodes in the inventory and write a playbook to install WebLogic/WebSphere.
Run the playbook from your control machine & it will be installed on all your nodes.

Normal architecture :
Control machine : need to have ansible installed
nodes machines
Playbooks : Contain plays
plays will have tasks
tasks will call modules
Handlers are also there that will run once at the end of ur plays.
roles : special kind of playbook that are fully self contained 
sample playbook:

---
- name: install and start apache
  hosts: web  *** specify which inventory group ansible should apply this playbook to
  remote_user: justin *** which user to use for remote connection
  become_method: sudo
  become_user: root ** accessing as a root user
  vars:  **few variables added to the playbook itself
     http_port: 80
     max_clients: 200
  
  tasks: *** each task will have a name and also a margial which tells ansible how to configure the target system
  - name: install httpd
    yum: name=httpd state=latest **package installation using yum
  - name: write apache config file
    template: src=srv/httpd.j2 dest=etc/httpd.conf ** deployed configuration file using template file any variables in the template will be replaced with the ones in the playbook vars.
    notify:
    - restart apache
  - name: start httpd
    service: name=httpd state=running ** ensure that this service is started
  handlers:  ** if the configuration file is altered as a part of this playbook run ansible will restart the service once all plays have successfully run 
  - name: restart apache
    service: name=httpd state=restarted
 

Inventory files: list of hosts/machines on which the commands are to be run 
sample inventory file:
[web]
web1-example.com
web2-example.com
[db]
weba-example.com
webb-example.com

few commands to run on controller machine(adhoc commands):
-->  ansible web -a /bin/date
-->  ansible web -m ping
-->  ansible web -s -m yum -a "name=openssl state=latest"      (permisiion deniederror)  *** ensure a package is updated

https://www.ansible.com/resources/videos/quick-start-video

